TestCase subclass: #BaseTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!BaseTest methodsFor: 'testing' stamp: 'tg 11/3/2018 14:25'!testException: blockToTest	blockToTest on: Error do: [:e| (self assert: (e messageText) = 'invalid input'). ^0].	self assert: false.! !BaseTest subclass: #MonomTest	instanceVariableNames: 'monom'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!MonomTest methodsFor: 'exp' stamp: 'tg 11/3/2018 00:28'!testExpAnInteger_failNegative	self testException: [monom exp: -1.].	self assertExpIsDefault.! !!MonomTest methodsFor: 'exp' stamp: 'tg 11/3/2018 00:28'!testExpAnInteger_failNonInteger	self testException: [monom exp: 1.0.].	self assertExpIsDefault.! !!MonomTest methodsFor: 'exp' stamp: 'tg 11/3/2018 00:28'!testExpAnInteger_success	monom exp: 1.	self assert: monom exp = 1.! !!MonomTest methodsFor: 'exp' stamp: 'tg 11/3/2018 00:28'!testExpAnInteger_successZero	monom exp: 0.	self assert: monom exp = 0.! !!MonomTest methodsFor: 'init' stamp: 'tg 11/3/2018 00:29'!testdefaultInit	self assertExpIsDefault.	self assertCoefIsDefault.! !!MonomTest methodsFor: 'coef' stamp: 'tg 11/3/2018 00:32'!testCoefAnInteger_failNonInteger	self testException: [monom coef: 1.0.].	self assertCoefIsDefault.! !!MonomTest methodsFor: 'coef' stamp: 'tg 11/3/2018 00:30'!testCoefAnInteger_success	monom coef: 1.	self assert: monom coef = 1.! !!MonomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 00:56'!testDerivative_2x0	monom coef: 2.	monom exp: 0.	self assertDerivativeExp: 0 andCoef: 0.! !!MonomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 00:49'!testDerivative_3x4	monom coef: 3.	monom exp: 4.	self assertDerivativeExp: 3 andCoef: 12.! !!MonomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 01:11'!testDerivative_from2x3To0	monom exp: 3.	monom coef: 2.	self assertExp: 3 andCoef: 2.	monom := monom derivative.	self assertExp: 2 andCoef: 6.	monom := monom derivative.	self assertExp: 1 andCoef: 12.	monom := monom derivative.	self assertExp: 0 andCoef: 12.	monom := monom derivative.	self assertExp: 0 andCoef: 0.	monom := monom derivative.	self assertExp: 0 andCoef: 0.! !!MonomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 00:23'!assertCoefIsDefault	self assert: monom coef = 0.! !!MonomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 00:47'!assertDerivativeExp: e andCoef: c	monom := monom derivative.	self assert: monom exp = e.	self assert: monom coef = c.! !!MonomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 01:05'!assertExp: e andCoef: c	self assert: monom exp = e.	self assert: monom coef = c.! !!MonomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 00:23'!assertExpIsDefault	self assert: monom exp = 0.! !!MonomTest methodsFor: 'testing' stamp: 'tg 11/2/2018 17:10'!setUp	monom := Monom new.! !BaseTest subclass: #PolyStreamTest	instanceVariableNames: 'polyStream'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!PolyStreamTest methodsFor: 'addCoefWithExp' stamp: 'tg 11/7/2018 20:54'!testAddCoefWithExp_failCoefNotInteger	self testException: [polyStream addCoef: 1.0 withExp: 1.].! !!PolyStreamTest methodsFor: 'addCoefWithExp' stamp: 'tg 11/7/2018 20:55'!testAddCoefWithExp_failExpNegative	self testException: [polyStream addCoef: 1 withExp: -1.].! !!PolyStreamTest methodsFor: 'addCoefWithExp' stamp: 'tg 11/7/2018 20:54'!testAddCoefWithExp_failExpNotInteger	self testException: [polyStream addCoef: 1 withExp: 1.0.].! !!PolyStreamTest methodsFor: 'addCoefWithExp' stamp: 'tg 11/3/2018 23:33'!testAddCoefWithExp_success	self dictToPolyStream: (Dictionary newFrom: {3->2. 2->2. 1->3. 0->5. 5->0}).	self testEvalWithValue: 3 expected: 77.! !!PolyStreamTest methodsFor: 'addCoefWithExp' stamp: 'tg 11/7/2018 20:56'!testAddCoefWithExp_successExpZero	polyStream addCoef: 3 withExp: 0.	self testEvalWithValue: -4 expected: 3.! !!PolyStreamTest methodsFor: 'add' stamp: 'tg 11/3/2018 23:45'!testAdd_failNotPolyStream	self testException: [polyStream add: 1.].! !!PolyStreamTest methodsFor: 'add' stamp: 'tg 11/4/2018 15:09'!testAdd_success	| otherPolyStream |	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4}).	otherPolyStream := self dictToNewPolyStream: (Dictionary newFrom: {1->3. 2->7}).	polyStream add: otherPolyStream.	self testEvalWithValue: 4 expected: 34240.! !!PolyStreamTest methodsFor: 'add' stamp: 'tg 11/3/2018 23:55'!testAdd_successOtherEmpty	| otherPolyStream |	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4}).	otherPolyStream := PolyStream new.	polyStream add: otherPolyStream.	self testEvalWithValue: 5 expected: 3375.! !!PolyStreamTest methodsFor: 'add' stamp: 'tg 11/3/2018 23:57'!testAdd_successSelfEmpty	| otherPolyStream |	otherPolyStream := self dictToNewPolyStream: (Dictionary newFrom: {1->3. 2->7}).	polyStream add: otherPolyStream.	self testEvalWithValue: 4 expected: 32832.! !!PolyStreamTest methodsFor: 'substitute' stamp: 'tg 11/4/2018 00:11'!testsubstitute_failNotInteger	self testException: [polyStream substitute: 1.0.].! !!PolyStreamTest methodsFor: 'substitute' stamp: 'tg 11/4/2018 00:12'!testsubstitute_failZero	self testException: [polyStream substitute: 0.].! !!PolyStreamTest methodsFor: 'substitute' stamp: 'tg 11/4/2018 00:15'!testsubstitute_success	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4}).	polyStream substitute: 2.	self testEvalWithValue: 4 expected: 21504.! !!PolyStreamTest methodsFor: 'substitute' stamp: 'tg 11/4/2018 00:15'!testsubstitute_successEmpty	polyStream substitute: 2.	self testEvalWithValue: 4 expected: 0.! !!PolyStreamTest methodsFor: 'multiplyBy' stamp: 'tg 11/4/2018 00:25'!testMultiplyBy_failNotInteger	self testException: [polyStream multiplyBy: 1.0.].! !!PolyStreamTest methodsFor: 'multiplyBy' stamp: 'tg 11/4/2018 00:30'!testMultiplyBy_success	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4}).	polyStream multiplyBy: 2.	self testEvalWithValue: 4 expected: 2816.! !!PolyStreamTest methodsFor: 'multiplyBy' stamp: 'tg 11/4/2018 00:30'!testMultiplyBy_successZero	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4}).	polyStream multiplyBy: 0.	self testEvalWithValue: 4 expected: 0.! !!PolyStreamTest methodsFor: 'filter' stamp: 'tg 11/4/2018 12:12'!testFilter_success	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4. 3->7}).	polyStream filter: (Set newFrom: #(3 7)).	self testEvalWithValue: 4 expected: 1280.! !!PolyStreamTest methodsFor: 'filter' stamp: 'tg 11/4/2018 16:30'!testFilter_successAddMonomAfterFilter	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4. 3->7}).	polyStream filter: (Set newFrom: #(3 7)).	polyStream addCoef: 4 withExp: 3.	self testEvalWithValue: 4 expected: 1536.! !!PolyStreamTest methodsFor: 'filter' stamp: 'tg 11/4/2018 12:20'!testFilter_successEmptyAfterFilter	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4. 3->7}).	polyStream filter: (Set newFrom: #(3 4 7)).	self testEvalWithValue: 3 expected: 0.! !!PolyStreamTest methodsFor: 'filter' stamp: 'tg 11/4/2018 12:19'!testFilter_successSetNotAliased	| set |	self dictToPolyStream: (Dictionary newFrom: {2->3. 5->4. 3->7}).	set := Set newFrom: #(3 7).	polyStream filter: set.	set add: 4.	self testEvalWithValue: 5 expected: 3125.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/4/2018 18:18'!testIntersectionOf: block atValue: expected	| value |	[value := block value. value = 'wait for it...'.] whileTrue: [].	self assert: (value = expected).! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/4/2018 17:13'!testIntersectionWith_failNotInteger	self testException: [polyStream intersectionWith: (PolyStream new) withinRange: 1.0 willUpdate: false.].! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/5/2018 00:04'!testIntersectionWith_failNotPolyStream	self testException: [polyStream intersectionWith: 1 withinRange: 5 willUpdate: false.].! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/4/2018 17:13'!testIntersectionWith_failNotPolyStreamAndNotInteger	self testException: [polyStream intersectionWith: 1 withinRange: 1.0 willUpdate: false.].! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:42'!testIntersectionWith_failOtherNotUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((-1 2))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((-1 2) (6 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	polyStream2 filter: (Set newFrom: #(0)). "polyStream2 = ((-1 2))"	self testNotIntersectionOf: block.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_failOtherUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: true.	polyStream2 filter: (Set newFrom: #(3 2 1 0)). "polyStream2 = ()"	polyStream2 addCoef: 1 withExp: 3. "polyStream2 = (1 3)"	self testNotIntersectionOf: block.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_failSelfNotUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((-1 2))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((-1 2) (6 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	polyStream addCoef: 6 withExp: 0. "polyStream = ((-1 2) (6 0))"	self testNotIntersectionOf: block.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_failSelfUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: true.	polyStream filter: (Set newFrom: #(2 1 0)). "polyStream = ()"	polyStream addCoef: 1 withExp: 3. "polyStream = ((1 3))"	self testNotIntersectionOf: block.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/5/2018 00:22'!testIntersectionWith_successBothEmtpy	| polyStream2 block |	polyStream2 := PolyStream new.	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	self testIntersectionOf: block atValue: 0.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:38'!testIntersectionWith_successOtherEmtpy	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 1) (5 0))).	polyStream2 := PolyStream new.	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	self testIntersectionOf: block atValue: -5.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_successOtherNotUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	polyStream2 filter: (Set newFrom: #(3 2 1 0)). "polyStream2 = ()"	polyStream2 addCoef: -5 withExp: 0. "polyStream2 = ((-5 0))"	self testIntersectionOf: block atValue: 1.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_successOtherUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: true.	polyStream2 filter: (Set newFrom: #(3 2 1 0)). "polyStream2 = ()"	polyStream2 addCoef: -5 withExp: 0. "polyStream2 = ((-5 0))"	self testIntersectionOf: block atValue: 0.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:40'!testIntersectionWith_successSelfEmpty	| polyStream2 block |	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	self testIntersectionOf: block atValue: 1.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:39'!testIntersectionWith_successSelfNotUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: false.	polyStream filter: (Set newFrom: #(2 1 0)). "polyStream = ()"	polyStream addCoef: -15 withExp: 0. "polyStream = ((-15 0))"	self testIntersectionOf: block atValue: 1.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/9/2018 17:39'!testIntersectionWith_successSelfUpdated	| polyStream2 block |	self orderedCollectionToPolyStream: (OrderedCollection newFrom: #((1 2) (4 1) (-5 0))).	polyStream2 := self orderedCollectionToNewPolyStream: (OrderedCollection newFrom: #((1 3) (7 2) (7 1) (-15 0))).	block := polyStream intersectionWith: polyStream2 withinRange: 5 willUpdate: true.	polyStream filter: (Set newFrom: #(2 1 0)). "polyStream = ()"	polyStream addCoef: -15 withExp: 0. "polyStream = ((-15 0))"	self testIntersectionOf: block atValue: 0.! !!PolyStreamTest methodsFor: 'intersectionWith' stamp: 'tg 11/4/2018 18:24'!testNotIntersectionOf: block	self testException: [self testIntersectionOf: block atValue: 1.0.].! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/9/2018 17:31'!dictToNewPolyStream: dict	| orderedCollection |	orderedCollection := OrderedCollection new.	(dict keys) do: [:coef| | monom |		monom := OrderedCollection new.		monom add: coef.		monom add: (dict at: coef).		orderedCollection add: monom.].	^self orderedCollectionToNewPolyStream: orderedCollection.! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/3/2018 23:50'!dictToPolyStream: dict	polyStream := self dictToNewPolyStream: dict.! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/9/2018 17:34'!orderedCollectionToNewPolyStream: orderedCollection	| newPolyStream |	(orderedCollection isKindOf: OrderedCollection)	ifTrue: [		newPolyStream := PolyStream new.		orderedCollection do: [:monom| newPolyStream addCoef: (monom at: 1) withExp: (monom at: 2)].		^newPolyStream.	]	ifFalse: [self error: 'Not an OrderedCollection'.]! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/9/2018 17:43'!orderedCollectionToPolyStream: orderedCollection	polyStream := self orderedCollectionToNewPolyStream: orderedCollection.! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/3/2018 23:18'!setUp	polyStream := PolyStream new.! !!PolyStreamTest methodsFor: 'testing' stamp: 'tg 11/4/2018 17:07'!testAllMutators	| polyStream2 |		polyStream2 := PolyStream new.	polyStream2 addCoef: 1 withExp: 1. "((1 1))"	polyStream2 addCoef: 2 withExp: 2. "((1 1) (2 2))"	polyStream2 addCoef: 3 withExp: 3. "((1 1) (2 2) (3 3))"	polyStream2 substitute: 2. "((2 1) (8 2) (24 3))"	polyStream2 multiplyBy: 2. "((4 1) (16 2) (48 3))"	polyStream2 addCoef: 2 withExp: 2. "((4 1) (16 2) (48 3) (2 2))"	polyStream2 filter: (Set newFrom: #(1 3)). "((16 2) (2 2))"	polyStream2 addCoef: 5 withExp: 5. "((16 2) (2 2) (5 5))"	polyStream2 addCoef: 5 withExp: 5. "((16 2) (2 2) (5 5) (5 5))"	polyStream2 filter: (Set newFrom: #(2)). "((5 5) (5 5))"		polyStream addCoef: 1 withExp: 1. "((1 1))"	polyStream addCoef: 2 withExp: 2. "((1 1) (2 2))"	polyStream addCoef: 3 withExp: 3. "((1 1) (2 2) (3 3))"	polyStream multiplyBy: 2. "((2 1) (4 2) (6 3))"	polyStream addCoef: 4 withExp: 4. "((2 1) (4 2) (6 3) (4 4))"	polyStream substitute: 3. "((6 1) (36 2) (162 3) (324 4))"	polyStream filter: (Set newFrom: #(1)). "((36 2) (162 3) (324 4))"	polyStream addCoef: 5 withExp: 5. "((36 2) (162 3) (324 4) (5 5))"	polyStream multiplyBy: 3. "((108 2) (486 3) (972 4) (15 5))"		polyStream add: polyStream2. "((108 2) (486 3) (972 4) (15 5) (5 5) (5 5))"		polyStream filter: (Set newFrom: #(3 4)). "((108 2) (15 5) (5 5) (5 5))"	polyStream multiplyBy: -1. "((-108 2) (-15 5) (-5 5) (-5 5))"	polyStream substitute: -2. "((-432 2) (480 5) (160 5) (160 5))"	polyStream addCoef: 1 withExp: 1. "((-432 2) (480 5) (160 5) (160 5) (1 1))"		self testEvalWithValue: 3 expected: 190515.! !!PolyStreamTest methodsFor: 'init' stamp: 'tg 11/3/2018 23:20'!testDefaultInit	self assert: ((polyStream block) isKindOf: BlockClosure).! !!PolyStreamTest methodsFor: 'eval' stamp: 'tg 11/3/2018 23:34'!testAddCoefWithExp_successEmpty	self testEvalWithValue: -5 expected: 0.! !!PolyStreamTest methodsFor: 'eval' stamp: 'tg 11/3/2018 23:26'!testEvalWithValue: x expected: expected	self assert: ((polyStream eval: x) = expected).	! !!PolyStreamTest methodsFor: 'eval' stamp: 'tg 11/3/2018 23:17'!testEval_failNotInteger	self testException: [polyStream eval: 1.0.].! !BaseTest subclass: #PolynomTest	instanceVariableNames: 'polynom'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1Test'!!PolynomTest methodsFor: 'multiplyByMonom' stamp: 'tg 11/3/2018 12:21'!testMultiplyByMonom_failNotMonom	self testException: [polynom multiplyByMonom: 1.].! !!PolynomTest methodsFor: 'multiplyByMonom' stamp: 'tg 11/3/2018 12:34'!testMultiplyByMonom_multiplyByZero	self dictToPolynom: (Dictionary newFrom: {2->2. 3->6}).	polynom multiplyByMonom: (self newMonomWithExp: 0 andCoef: 0).	self assertPolynomEmpty.! !!PolynomTest methodsFor: 'multiplyByMonom' stamp: 'tg 11/3/2018 12:36'!testMultiplyByMonom_multiplyEmptyPolynom	polynom multiplyByMonom: (self newMonomWithExp: 3 andCoef: 2).	self assertPolynomEmpty.! !!PolynomTest methodsFor: 'multiplyByMonom' stamp: 'tg 11/3/2018 14:12'!testMultiplyByMonom_notAliased	| monom |	self dictToPolynom: (Dictionary newFrom: {0->1}).		monom := self newMonomWithExp: 3 andCoef: 2.	polynom multiplyByMonom: monom.	self assertPolynom: (Dictionary newFrom: {3->2}).	self changeMonom: monom toExp: 4 andCoef: 3.	self assertPolynom: (Dictionary newFrom: {3->2}).! !!PolynomTest methodsFor: 'multiplyByMonom' stamp: 'tg 11/3/2018 13:46'!testMultiplyByMonom_success	self dictToPolynom: (Dictionary newFrom: {2->2. 3->6}).	polynom multiplyByMonom: (self newMonomWithExp: 5 andCoef: 3).	self assertPolynom: (Dictionary newFrom: {7->6. 8->18}).! !!PolynomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 14:32'!assertDerivative: dict	polynom := polynom derivative.	self assertPolynom: dict.! !!PolynomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 14:44'!testDerivative_monomToZero	self dictToPolynom: (Dictionary newFrom: {0->2. 9->5}).	self assertDerivative: (Dictionary newFrom: {8->45}).! !!PolynomTest methodsFor: 'derivative' stamp: 'tg 11/3/2018 17:18'!testDerivative_success	self dictToPolynom: (Dictionary newFrom: {2->2. 3->6}).	self assertDerivative: (Dictionary newFrom: {1->4. 2->18}).! !!PolynomTest methodsFor: 'eval' stamp: 'tg 11/3/2018 16:05'!testEval_failNotInteger	self testException: [polynom eval: 1.0].! !!PolynomTest methodsFor: 'eval' stamp: 'tg 11/3/2018 16:13'!testEval_success	self dictToPolynom: (Dictionary newFrom: {3->1. 8->3}).	self assert: ((polynom eval: -3) = 19656).! !!PolynomTest methodsFor: 'eval' stamp: 'tg 11/3/2018 16:14'!testEval_successEmptyPolynom	self assert: ((polynom eval: 6) = 0).! !!PolynomTest methodsFor: 'eval' stamp: 'tg 11/3/2018 16:13'!testEval_successZeroEvalToNonZero	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	self assert: ((polynom eval: 0) = 5).	! !!PolynomTest methodsFor: 'eval' stamp: 'tg 11/3/2018 16:13'!testEval_successZeroEvalToZero	self dictToPolynom: (Dictionary newFrom: {3->1. 8->3}).	self assert: ((polynom eval: 0) = 0).	! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:30'!testAdd_failNotPolynom	self testException: [polynom add: 1.].! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:28'!testAdd_success	| otherPolynom |	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	otherPolynom := self dictToNewPolynom: (Dictionary newFrom: {0->2. 2->9}).	polynom := polynom add: otherPolynom.	self assertPolynom: (Dictionary newFrom: {0->7. 2->9. 8->3}).! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:49'!testAdd_successNotAliasedByOther	| otherPolynom addedPolynom |	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	otherPolynom := self dictToNewPolynom: (Dictionary newFrom: {0->2. 2->9}).	addedPolynom := polynom add: otherPolynom.	self assertPolynom: addedPolynom withDict: (Dictionary newFrom: {0->7. 2->9. 8->3}).	otherPolynom addMonom: (self newMonomWithExp: 0 andCoef: 1).	self assertPolynom: addedPolynom withDict: (Dictionary newFrom: {0->7. 2->9. 8->3}).! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:49'!testAdd_successNotAliasedBySelf	| otherPolynom addedPolynom |	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	otherPolynom := self dictToNewPolynom: (Dictionary newFrom: {0->2. 2->9}).	addedPolynom := polynom add: otherPolynom.	self assertPolynom: addedPolynom withDict: (Dictionary newFrom: {0->7. 2->9. 8->3}).	polynom addMonom: (self newMonomWithExp: 0 andCoef: 1).	self assertPolynom: addedPolynom withDict: (Dictionary newFrom: {0->7. 2->9. 8->3}).! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:38'!testAdd_successOneMonomZero	| otherPolynom |	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	otherPolynom := self dictToNewPolynom: (Dictionary newFrom: {0->2. 8->(-3)}).	polynom := polynom add: otherPolynom.	self assertPolynom: (Dictionary newFrom: {0->7}).! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:33'!testAdd_successOtherPolynomEmpty	| otherPolynom |	self dictToPolynom: (Dictionary newFrom: {0->5. 8->3}).	otherPolynom := Polynom new.	polynom := polynom add: otherPolynom.	self assertPolynom: (Dictionary newFrom: {0->5. 8->3}).! !!PolynomTest methodsFor: 'add' stamp: 'tg 11/3/2018 17:31'!testAdd_successSelftEmptyPolynom	| otherPolynom |	otherPolynom := self dictToNewPolynom: (Dictionary newFrom: {0->2. 2->9}).	polynom := polynom add: otherPolynom.	self assertPolynom: (Dictionary newFrom: {0->2. 2->9}).! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 17:48'!assertPolynom: polynomDict	self assertPolynom: polynom withDict: polynomDict.! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 23:30'!assertPolynom: polynom withDict: polynomDict	(polynomDict isKindOf: Dictionary)		ifTrue: [self assert: (polynom asDictionary = polynomDict).]		ifFalse: [self error: 'Not a Dictionary'.]! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 10:15'!assertPolynomEmpty	self assertPolynom: (Dictionary newFrom: {}).! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 10:07'!changeMonom: monom toExp: e andCoef: c	monom exp: e.	monom coef: c.	^monom.! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 17:23'!dictToNewPolynom: dict	| newPolynom |	newPolynom := Polynom new.	(dict keys) do: [:exp| newPolynom addMonom: (self newMonomWithExp: exp andCoef: (dict at: exp))].	^newPolynom.! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 17:24'!dictToPolynom: dict	polynom := self dictToNewPolynom: dict.! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 10:04'!newMonomWithExp: e andCoef: c	|monom|	monom := Monom new.	monom exp: e.	monom coef: c.	^monom.! !!PolynomTest methodsFor: 'testing' stamp: 'tg 11/3/2018 10:18'!testDefaultInit	self assertPolynomEmpty.! !!PolynomTest methodsFor: 'initialize-release' stamp: 'tg 11/3/2018 09:54'!setUp	polynom := Polynom new.! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 09:56'!testAddMonom_failNotMonom	self testException: [polynom addMonom: 1.].! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 10:30'!testAddMonom_mergeSameExp	polynom addMonom: (self newMonomWithExp: 3 andCoef: 2).	polynom addMonom: (self newMonomWithExp: 3 andCoef: 4).	self assertPolynom: (Dictionary newFrom: {3->6}).! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 10:12'!testAddMonom_monomNotAliased	|monom|	monom := self newMonomWithExp: 2 andCoef: 3.	polynom addMonom: monom.	self assertPolynom: (Dictionary newFrom: {2->3}).	self changeMonom: monom toExp: 3 andCoef: 2.	self assertPolynom: (Dictionary newFrom: {2->3}).! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 12:10'!testAddMonom_sameExpResultInZero	polynom addMonom: (self newMonomWithExp: 3 andCoef: 2).	polynom addMonom: (self newMonomWithExp: 3 andCoef: -2).	self assertPolynomEmpty.! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 14:07'!testAddMonom_success	polynom addMonom: (self newMonomWithExp: 3 andCoef: 2).	polynom addMonom: (self newMonomWithExp: 7 andCoef: 10).	polynom addMonom: (self newMonomWithExp: 5 andCoef: 8).	self assertPolynom: (Dictionary newFrom: {3->2. 5->8. 7->10}).! !!PolynomTest methodsFor: 'addMonom' stamp: 'tg 11/3/2018 10:19'!testAddMonom_zeroCoefDoNotAdd	polynom addMonom: (self newMonomWithExp: 3 andCoef: 0).	self assertPolynomEmpty.! !