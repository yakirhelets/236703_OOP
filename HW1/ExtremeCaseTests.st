TestCase subclass: #PolyStreamTests	instanceVariableNames: 'ps1 ps2 ps3 ps4 ps5 bl1 bl2'	classVariableNames: ''	poolDictionaries: ''	category: 'ExtremeCaseTests'!!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:22'!setUp	ps1 := PolyStream new.	ps2 := PolyStream new.	ps3 := PolyStream new.	ps4 := PolyStream new.	ps5 := PolyStream new.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:23'!testAddCoefWithExpInput	self shouldnt: [ps1 addCoef: -2 withExp: 4] raise: Error.	self should: [ps1 addCoef: 2 withExp: -4] raise: Error.	self shouldnt: [ps1 addCoef: 2 withExp: 4] raise: Error.	self should: [ps1 addCoef: 'String'  withExp: 4] raise: Error.	self should: [ps1 addCoef: -2 withExp: 'String'] raise: Error.	self should: [ps1 addCoef: true withExp: 4] raise: Error.	self should: [ps1 addCoef: -2 withExp: true] raise: Error.	self should: [ps1 addCoef: -2.5 withExp: 4] raise: Error.	self should: [ps1 addCoef: -2 withExp: 4.0] raise: Error.	self should: [ps1 addCoef: ps2 withExp: 4] raise: Error.	self should: [ps1 addCoef: -2 withExp: ps2] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:24'!testAddPolyStreamInput	self shouldnt: [ps1 add: ps2] raise: Error.	self should: [ps1 add: 1] raise: Error.	self should: [ps1 add: 2.0] raise: Error.	self should: [ps1 add: true] raise: Error.	self should: [ps1 add: 'String'] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:48'!testAddZeroSumPolystream	ps1 addCoef: -5 withExp: 3.	ps1 addCoef: -2 withExp: 2.	ps2 addCoef: 2 withExp: 2.	ps2 addCoef: 5 withExp: 3.		ps1 add: ps2.		self assert: [(ps1 eval: 2) = (ps3 eval: 3)].	self assert: [(ps1 eval: -2) = (ps3 eval: 5)].	self assert: [(ps1 eval: -600) = (ps3 eval: 800)].		! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:01'!testAddingZeroCoefsForZeroPolynom	ps1 addCoef: 0 withExp: 30.	ps1 addCoef: 0 withExp: 5.	ps1 addCoef: 0 withExp: 1.		self assert: [(ps1 eval: -22) = (ps2 eval: 2)].	self assert: [(ps1 eval: 20) = (ps2 eval: -2)].	self assert: [(ps1 eval: 600) = (ps2 eval: 800)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:04'!testAddingZeroPolynomWithCoefZero	ps1 addCoef: 0 withExp: 4.	ps2 addCoef: 2 withExp: 3.		ps2 add: ps1.		self assert: [(ps2 eval: 2) = 16].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:29'!testEvalInput	self shouldnt: [ps1 eval: 3] raise: Error.	self shouldnt: [ps1 eval: 0] raise: Error.	self shouldnt: [ps1 eval: -1] raise: Error.	self should: [ps1 eval: true] raise: Error.	self should: [ps1 eval: 'String'] raise: Error.	self should: [ps1 eval: ps2] raise: Error.	self should: [ps1 eval: 4.3] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:55'!testFilterAffectsAll	ps1 addCoef: 5 withExp:1.	ps1 addCoef: 5 withExp:2.	ps1 addCoef: 5 withExp:3.	ps1 addCoef: 5 withExp:4.	ps1 addCoef: 5 withExp:5.		ps1 filter: (Set with:1 with:2 with:3 with:4 with:5).		self assert: [(ps1 eval: 2) = (ps3 eval: 3)].	self assert: [(ps1 eval: -2) = (ps3 eval: 5)].	self assert: [(ps1 eval: -600) = (ps3 eval: 800)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:50'!testFilterSetModifications	ps1 addCoef: 4 withExp: 3.	ps1 addCoef: 5 withExp: 4.	ps1 addCoef: 2 withExp: 5.	bl2:= Set with: 3 with:4.		ps1 filter: bl2.		bl2 add: 5.		self deny: [(ps1 eval: 1) = 0].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:07'!testIntersectionWithItself	ps1 addCoef: 4 withExp: 1.	ps1 addCoef: 2 withExp: 2.		ps2 addCoef: 4 withExp: 1.	ps2 addCoef: 2 withExp: 2.		bl1 := ps1 intersectionWith: ps2 withinRange: 5 willUpdate: false.	self assert: [(bl1 value) = 0]. 		! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:07'!testIntersectionWithNegativeFirst	ps1 addCoef: 1 withExp: 2.	ps1 addCoef: -1 withExp: 1.	ps1 addCoef: -6 withExp: 0.		bl1 := ps1 intersectionWith: ps2 withinRange: 3 willUpdate: false.		1 to: 4 do: [:i|					bl1 value.		].		self assert: [(bl1 value) = -2].	 ! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:08'!testIntersectionWithPositiveFirst	ps1 addCoef: 1 withExp: 2.	ps1 addCoef: 1 withExp: 1.	ps1 addCoef: -6 withExp: 0.		bl1 := ps1 intersectionWith: ps2 withinRange: 3 willUpdate: false.		1 to: 3 do: [:i|					bl1 value.		].		self assert: [(bl1 value) = 2].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:14'!testMultipleFilters	ps1 addCoef: 1 withExp: 1.	ps1 addCoef: 1 withExp: 2.	ps1 addCoef: 1 withExp: 3.	ps1 addCoef: 1 withExp: 4.	ps1 addCoef: 1 withExp: 5.	ps1 addCoef: 1 withExp: 6.		ps1 filter: (Set with:1 with: 2 with: 3).	ps1 filter: (Set with: 4 with: 6).		self assert: [(ps1 eval: 2) = 32].	 	! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:12'!testMultiplyByAZeroCoefPolynom	ps1 addCoef: 0 withExp: 3.		ps1 multiplyBy: 3.		self assert: [(ps1 eval: 2) = (ps3 eval: 3)].	self assert: [(ps1 eval: -2) = (ps3 eval: 5)].	self assert: [(ps1 eval: -600) = (ps3 eval: 800)].		! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:28'!testMultiplyByInput	self shouldnt: [ps1 multiplyBy: 3] raise: Error.	self shouldnt: [ps1 multiplyBy: -1] raise: Error.	self should: [ps1 multiplyBy: true] raise: Error.	self should: [ps1 multiplyBy: 'String'] raise: Error.	self should: [ps1 multiplyBy: ps2] raise: Error.	self should: [ps1 multiplyBy: 4.3] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:29'!testPolyStreamChangeWithIntersection	ps1 addCoef: 4 withExp: 1.	ps2 addCoef: 4 withExp: 1.		bl1 := ps1 intersectionWith: ps2 withinRange: 1 willUpdate: true.		ps2 addCoef: 2 withExp: 0.		self deny: [(bl1 value) = 0].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:32'!testPolyStreamConstantIntersection	ps1 addCoef: 4 withExp: 0.	ps2 addCoef: 5 withExp: 0.		bl1 := ps1 intersectionWith: ps2 withinRange: 3 willUpdate: false.		ps3 addCoef: -1 withExp: 0.	ps2 add: ps3.		self deny: [(bl1 value) = 0].	 ! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:41'!testQuadricEvaluationEquality	" -5x^2 => (x= -5,5) -125"		ps1 addCoef: -5 withExp: 2.	self assert: [(ps1 eval: 5) = (ps1 eval: -5)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:52'!testSetDoesntChangePolynom	ps1 addCoef: 4 withExp: 2.	ps1 addCoef: 1 withExp: 3.		ps2 addCoef: 4 withExp: 2.	ps2 addCoef: 1 withExp: 3.		ps1 filter: (Set with:1 with:4 with:5).		self assert: [(ps1 eval: 2) = (ps2 eval: 2)].	self assert: [(ps1 eval: -2) = (ps2 eval: -2)].	self assert: [(ps1 eval: 800) = (ps2 eval: 800)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:10'!testSubstituteByNegatives	" 4x^2 + 5 -> (-3x) -> -108x^2 + 5"		ps1 addCoef: 4 withExp: 3.	ps1 addCoef: 5 withExp: 0.		ps1 substitute: -3.		self assert: [(ps1 eval: 1) = -103].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:34'!testSubstituteByOne	ps1 addCoef: 5 withExp: 1.	"Same polynom"	ps2 addCoef: 5 withExp: 1.	ps1 substitute: 1. 	self assert: [(ps1 eval: 3) = (ps2 eval: 3)].	self assert: [(ps1 eval: 1) = (ps2 eval: 1)].	self assert: [(ps1 eval: -8) = (ps2 eval: -8)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:26'!testSubstituteInput	self shouldnt: [ps1 substitute: 3] raise: Error.	self should: [ps1 substitute: 0] raise: Error.	self shouldnt: [ps1 substitute: -1] raise: Error.	self should: [ps1 substitute: true] raise: Error.	self should: [ps1 substitute: 'String'] raise: Error.	self should: [ps1 substitute: ps2] raise: Error.	self should: [ps1 substitute: 4.3] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:39'!testSubstituteIsNotMultiply	" 4x^2 -> (3x) = 36x^2"	"4x^2 -> 3 = 12x^2"		ps1 addCoef: 4 withExp: 2.	ps2 addCoef: 4 withExp: 2.		ps1 substitute: 3.	ps2 multiplyBy: 3.		self deny: [(ps1 eval: 3) = (ps2 eval: 3) ].	self deny: [(ps1 eval: -5) = (ps2 eval: 5) ].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 16:11'!testSubstituteOfZeroCoefPolynom	ps1 addCoef: 0 withExp: 596.		self shouldnt: [ps1 substitute: 3.] raise: Error.	self shouldnt: [ps1 eval: 3.] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:08'!testTwoDifferentConstantFunctionsIntersection	ps1 addCoef: 4 withExp: 0.	ps2 addCoef: -2 withExp: 0.		bl1 := ps1 intersectionWith: ps2 withinRange: 50 willUpdate: false.		self should: [			1 to: 150 do: [:i |					bl1 value.				]		] raise: Error.! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:59'!testTwoWaySubstituteForSameValue	ps1 addCoef: 5 withExp: 1.	ps1 addCoef: 4 withExp: 2.	ps2 addCoef: 5 withExp: 1.	ps2 addCoef: 4 withExp: 2.	ps1 substitute: 3.	ps1 substitute: 2.	ps2 substitute: 2.	ps2 substitute: 3.	self assert: [(ps1 eval: 2) = (ps2 eval: 2)].	self assert: [(ps1 eval: -2) = (ps2 eval: -2)].	self assert: [(ps1 eval: 800) = (ps2 eval: 800)].! !!PolyStreamTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:20'!testZeroPolyStreamInit	self assert: [(ps1 eval: 1500) = 0].! !TestCase subclass: #PolynomTests	instanceVariableNames: 'm1 m2 m3 m4 p1 p2 p3 p4'	classVariableNames: ''	poolDictionaries: ''	category: 'ExtremeCaseTests'!!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:05'!setUp	m1 := Monom new.	m2 := Monom new.	m3 := Monom new.	m4 := Monom new.	p1 := Polynom new.	p2 := Polynom new.	p3 := Polynom new.	p4 := Polynom new.! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:06'!testAddMultiplePolynoms	" x + x^2 + x^3"		m1 exp: 1.	m1 coef: 1.	m2 exp: 2.	m2 coef: 1.	m3 exp: 3.	m3 coef: 1.		p1 addMonom: m1.	p2 addMonom: m2.	p3 addMonom: m3.		p4 := (p1 add: p2) add: p3.		self assert: [((p4 asDictionary) size) = 3].	self assert: [(p4 eval: 2) = 14].				! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:18'!testDerivativeAddition" (3x^3)' + (-9x)' -> eval 1 = 0"		m1 coef: 3.	m1 exp: 3.	m2 coef: -9.	m2 exp: 1.		p1 addMonom: m1.	p2 addMonom: m2.		p3 := p1 derivative.	p4 := p2 derivative.		self assert: [((p3 add: p4) eval: 1) = 0].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:41'!testEmptyDictionary	self assert: [(p1 asDictionary) isEmpty].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:44'!testMonomChangeDuringAddition	m1 coef: 1.	m1 exp: 1.		m2 exp: 1.	m2 coef: -1.		p1 addMonom: m1.		p1 addMonom: m2.		m2 exp: 0.	m2 coef: 0.		self assert: [(p1 asDictionary) size = 0].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:44'!testMonomChangeDuringMultiply	m1 coef: 1.	m1 exp: 1.		m2 exp: 4.	m2 coef: 1.		p1 addMonom: m1.		p1 multiplyByMonom: m2.		m2 exp: 0.	m2 coef: 0.		self deny: [(p1 asDictionary) size = 0].		! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:56'!testMultipleMonomsWithSameExp	m1 coef: 1.	m1 exp: 2.		m2 exp: 2.		"x^2 + x^2 + 2x^2 + 3x^2 + 4x^2 = 11x^2"		p1 addMonom: m1.	1 to: 4 do: [:i|		m2 coef: i.		p1 addMonom: m2.		].	self assert: [((p1 asDictionary) size) = 1].	self assert: [(p1 eval: 3) = 99].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:13'!testMultipleMultiplicationByX	m1 coef: 1.	m1 exp: 1.		p1 addMonom: m1.	1 to: 10 do: [:i|			p1 multiplyByMonom: m1.		].	" x * x * x .... (11 times) = x^11"	self assert: [(p1 eval: 1) = 1].	self assert: [(p1 eval: 2) = 2048].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:14'!testMultiplyByZeroMonom	"Polynom (2x^2 + 4x -5) * 0 = 0"	m1 coef: 2.	m1 exp: 2.	m3 coef: -5.	m3 exp: 0.		p1 addMonom: m1.	p1 addMonom: (m2 derivative). 	p1 addMonom: m3.	p1 multiplyByMonom: m4.		self assert: [(p1 asDictionary) size = 0].	! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:40'!testNegativeDerivative	"-4x^2  -5 =>  -8x"	m1 coef: -4.	m1 exp: 2.		m2 coef: -5.	m2 exp: 0.		p1 addMonom: m1.	p1 addMonom: m2.		self assert: [(p1 derivative) asDictionary size = 1].	self assert: [((p1 derivative) eval: 4) = -32].	! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:06'!testNegativeMultiplication	"Polynom (2x^2 + 4x -5) * -1 = -2x^2 -4x +5"	m1 coef: 2.	m1 exp: 2.	m2 coef: -1.	m3 coef: -5.	m3 exp: 0.		p1 addMonom: m1.	p1 addMonom: (m1 derivative). 	p1 addMonom: m3.	p1 multiplyByMonom: m2.		self assert: [((p1 asDictionary) size) = 3].	self assert: [(p1 eval: 1) = -1].	self assert: [(p1 eval: 2) = -11].	self assert: [(p1 eval: -1) = 7 ].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:14'!testNegativeNumberDerivativeAddition	" (-5)' + (-8)' = 0"		m1 exp: 0.	m1 coef: -5.	m2 exp: 0.	m2 coef: -8.		p1 addMonom: m1.	p2 addMonom: m2.	p3 := p1 derivative.	p4 := p2 derivative.		self  assert: [((p3 add: p4) asDictionary) isEmpty]. ! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:25'!testPolynomAddInput	"add"	self should: [p1 add: m1] raise: Error.	self should: [p1 add: 5] raise: Error.	self should: [p1 add: 5.3] raise: Error. 	self should: [p1 add: 'Hi'] raise: Error. 	self should: [p1 add: true] raise:Error.	self shouldnt: [p1 add: p1] raise: Error. 	! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:25'!testPolynomAddMonomInput	"addMonom"	self shouldnt: [p1 addMonom: Monom new] raise: Error.	self should: [p1 addMonom: p1] raise: Error.	self should: [p1 addMonom: 5] raise: Error. 	self should: [p1 addMonom: 5.3] raise: Error. 	self should: [p1 addMonom: 'Hi'] raise: Error. 	self should: [p1 addMonom: true] raise:Error.	self should: [p1 addMonom: (p1 derivative)] raise:Error.! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:45'!testPolynomAddZeroPolynom	"3x^2 + 0 = 3x^2"	m1 coef: 3.	m1 exp: 2.		p1 addMonom: m1.		self assert: [((p1 add: p2) eval: 2) = 12].	self assert: [(p1 add: p2) asDictionary size = 1].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '13212 11/11/2018 17:16'!testPolynomChangeDuringAdd	m1 coef: 1.	m1 exp: 1.		p1 addMonom: m1.		m2 coef: 1.	m2 exp: 2.		p2 addMonom: m2. 		p3 := p1 add: p2.		p2 := Polynom new.	self deny: [((p3 asDictionary) size) = 1].	self assert: [(p3 eval: 2) = 6].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:46'!testPolynomEvalInput	self should: [p1 eval: p1] raise: Error.	self should: [p1 eval: m1] raise: Error.	self should: [p1 eval: true] raise: Error.	self shouldnt: [p1 eval: 0] raise: Error. 	self shouldnt: [p1 eval: -2] raise: Error. 	self should: [p1 eval: 5.3] raise: Error. 	self should: [p1 eval: 'Hi'] raise: Error. 	! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:26'!testPolynomMultByMonomInput	"multByMonom"	self shouldnt: [p1 multiplyByMonom:  Monom new] raise: Error.	self should: [p1 multiplyByMonom: p1] raise: Error.	self should: [p1 multiplyByMonom: 5] raise: Error. 	self should: [p1 multiplyByMonom: 5.3] raise: Error. 	self should: [p1 multiplyByMonom: 'Hi'] raise: Error. 	self should: [p1 multiplyByMonom: true] raise:Error.	self should: [p1 multiplyByMonom: (p1 derivative)] raise:Error.! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '4332 11/11/2018 15:45'!testQuadricEquality	m1 coef: -3.	m1 exp: 2.		p1 addMonom: m1.		self assert: [(p1 eval:5 ) = (p1 eval: -5)].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:36'!testZeroDerivative	self assert: [((p1 derivative) eval: 1500) = 0].	self assert: [((p1 derivative) asDictionary size) = 0].	self assert: [((p1 derivative) eval: 1500) = ((p2 derivative) eval: -800) ].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 12:52'!testZeroInMonoms	m1 coef: 0.	m1 exp: 4.	p1 addMonom: m1.		m2 coef: 0.	m2 exp: 3.		p1 addMonom: m2.		m3 coef: 3.	m3 exp: 0.		p1 addMonom: m3.		self assert: [((p1 asDictionary) size) = 1].! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:08'!testZeroSumMonomAddition	"-5x^3 + 5x^3 = 0"		m1 coef: -5.	m1 exp: 3.	m2 coef: 5.	m2 exp: 3.		p1 addMonom: m1.	p1 addMonom: m2.		self assert: [(p1 asDictionary) isEmpty]	! !!PolynomTests methodsFor: 'as yet unclassified' stamp: '1 11/11/2018 13:10'!testZeroSumPolynomAddition	"2x + 3 -2x -3 = 0"		m1 coef: 2.	m1 exp: 1.	m2 coef: 3.	m2 exp: 0.	m3 coef: -2.	m3 exp: 1.	m4 coef: -3.	m4 exp: 0.		p1 addMonom: m1.	p1 addMonom: m2.	p2 addMonom: m3.	p2 addMonom: m4.		p3 := p1 add: p2.	self assert: [(p3 asDictionary) isEmpty].! !